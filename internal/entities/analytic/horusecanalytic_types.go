// Copyright 2020 ZUP IT SERVICOS EM TECNOLOGIA E INOVACAO SA
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package analytic

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"

	"github.com/ZupIT/horusec-operator/internal/entities/groupversion"
)

// EDIT THIS FILE!  THIS IS SCAFFOLDING FOR YOU TO OWN!
// NOTE: json tags are required.  Any new fields you add must have json tags for the fields to be serialized.

// HorusecAnalyticSpec defines the desired state of HorusecAnalytic
type HorusecAnalyticSpec struct {
	// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster
	// Important: Run "make" to regenerate code after modifying this file

	// Foo is an example field of HorusecAnalytic. Edit horusecanalytic_types.go to remove/update
	Foo string `json:"foo,omitempty"`
}

// HorusecAnalyticStatus defines the observed state of HorusecAnalytic
type HorusecAnalyticStatus struct {
	// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster
	// Important: Run "make" to regenerate code after modifying this file
}

//+kubebuilder:object:root=true
//+kubebuilder:subresource:status

// HorusecAnalytic is the Schema for the horusecanalytics API
type HorusecAnalytic struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   HorusecAnalyticSpec   `json:"spec,omitempty"`
	Status HorusecAnalyticStatus `json:"status,omitempty"`
}

//+kubebuilder:object:root=true

// HorusecAnalyticList contains a list of HorusecAnalytic
type HorusecAnalyticList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HorusecAnalytic `json:"items"`
}

//nolint
func init() {
	groupversion.SchemeBuilder.Register(&HorusecAnalytic{}, &HorusecAnalyticList{})
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HorusecAnalytic) DeepCopyInto(out *HorusecAnalytic) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	out.Spec = in.Spec
	out.Status = in.Status
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HorusecAnalytic.
func (in *HorusecAnalytic) DeepCopy() *HorusecAnalytic {
	if in == nil {
		return nil
	}
	out := new(HorusecAnalytic)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *HorusecAnalytic) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HorusecAnalyticList) DeepCopyInto(out *HorusecAnalyticList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]HorusecAnalytic, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HorusecAnalyticList.
func (in *HorusecAnalyticList) DeepCopy() *HorusecAnalyticList {
	if in == nil {
		return nil
	}
	out := new(HorusecAnalyticList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *HorusecAnalyticList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HorusecAnalyticSpec) DeepCopyInto(out *HorusecAnalyticSpec) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HorusecAnalyticSpec.
func (in *HorusecAnalyticSpec) DeepCopy() *HorusecAnalyticSpec {
	if in == nil {
		return nil
	}
	out := new(HorusecAnalyticSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HorusecAnalyticStatus) DeepCopyInto(out *HorusecAnalyticStatus) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HorusecAnalyticStatus.
func (in *HorusecAnalyticStatus) DeepCopy() *HorusecAnalyticStatus {
	if in == nil {
		return nil
	}
	out := new(HorusecAnalyticStatus)
	in.DeepCopyInto(out)
	return out
}
